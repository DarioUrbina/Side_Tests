center = TRUE,  # Centers means to 0 (optional)
scale = TRUE)   # Sets unit variance (helpful)
# Get summary stats
summary(pc)
# Screeplot for number of components
plot(pc)
# Get standard deviations and rotation
pc
# See how cases load on PCs
predict(pc) %>% round(2)
# Biplot of first two components
biplot(pc)
?prcomp
# Get summary stats
summary(pc)
# Get standard deviations and rotation
pc
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, caret, lars, tidyverse)
head(USJudgeRatings)
data <- USJudgeRatings
# Define variable groups
x <- as.matrix(data[-12])
y <- data[, 12]
# Using variable groups
reg1 <- lm(y ~ x)
# Or specify variables individually
reg1 <- lm(RTEN ~ CONT + INTG + DMNR + DILG + CFMG +
DECI + PREP + FAMI + ORAL + WRIT + PHYS,
data = USJudgeRatings)
# Results
reg1           # Coefficients only
summary(reg1)  # Inferential tests
anova(reg1)            # Coefficients w/inferential tests
coef(reg1)             # Coefficients (same as reg1)
confint(reg1)          # CI for coefficients
resid(reg1)            # Residuals case-by-case
hist(residuals(reg1))  # Histogram of residuals
# Conventional stepwise regression
stepwise <- lars(x, y, type = "stepwise")
# Stagewise: Like stepwise but with better generalizability
forward <- lars(x, y, type = "forward.stagewise")
# LAR: Least Angle Regression
lar <- lars(x, y, type = "lar")
# LASSO: Least Absolute Shrinkage and Selection Operator
lasso <- lars(x, y, type = "lasso")
# Comparison of R^2 for new models
r2comp <- c(stepwise$R2[6], forward$R2[6],
lar$R2[6], lasso$R2[6]) %>%
round(2)
names(r2comp) <- c("stepwise", "forward", "lar", "lasso")
r2comp  # Show values of R^2
lasso
lar
stepwise
data <- state.x77
data
# Define variable groups
x <- as.matrix(data[-2])
y <- data[, 2]
y
hist(y)
# Using variable groups
reg1 <- lm(y ~ x)
x
# Define variable groups
x <- as.matrix(data[-2])
x
data <- state.x77
# Define variable groups
x <- as.matrix(data[-2])
y <- data[, 2]
# Define variable groups
x <- as.matrix(data[, -2])
y <- data[, 2]
# Using variable groups
reg1 <- lm(y ~ x)
# Define variable groups
x <- as.matrix(data[-12])
data <- USJudgeRatings
# Define variable groups
x <- as.matrix(data[-12])
x
y <- data[, 12]
y
data <- state.x77
# Define variable groups
x <- as.matrix(data[, -2])
data <- state.x77
# Define variable groups
x <- as.matrix(data[-2])
y <- data[, 2]
# Using variable groups
reg1 <- lm(y ~ x)
# Define variable groups
x <- as.matrix(data[, -2])
y <- data[, 2]
# Using variable groups
reg1 <- lm(y ~ x)
data <- USJudgeRatings
# Define variable groups
x <- as.matrix(data[, -12])
y <- data[, 12]
x <- data[, -12]
y <- data[, 12]
library(datasets)  # Load base packages manually
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, caret, lars, tidyverse)
?USJudgeRatings
head(USJudgeRatings)
data <- USJudgeRatings
x <- data[, -12]
y <- data[, 12]
# Using variable groups
reg1 <- lm(y ~ x)
# Define variable groups
x <- as.matrix(data[, -12])
# Using variable groups
reg1 <- lm(y ~ x)
# Or specify variables individually
reg1 <- lm(RTEN ~ CONT + INTG + DMNR + DILG + CFMG +
DECI + PREP + FAMI + ORAL + WRIT + PHYS,
data = USJudgeRatings)
# Results
reg1           # Coefficients only
summary(reg1)  # Inferential tests
data <- state.x77
# Define variable groups
x <- as.matrix(data[, -2])
y <- data[, 2]
# Using variable groups
reg1 <- lm(y ~ x)
summary(reg1)  # Inferential tests
# Conventional stepwise regression
stepwise <- lars(x, y, type = "stepwise")
summary(stepwise)
stepwise
?state.x77
head(state.x77)
data <- state.x77
# Using variable groups
reg1 <- lm(y ~ x)
reg1
# Or specify variables individually
reg2 <- lm(Income ~ Illiteracy + "Life Exp" + Murder +
"HS Grad", data = state.x77)
# Or specify variables individually
states <- as.data.frame(state.x77)
reg2 <- lm(Income ~ Illiteracy + "Life Exp" + Murder +
"HS Grad", data = states)
states
reg2 <- lm(Income ~ Illiteracy, data = states)
reg2 <- lm(Income ~ Illiteracy + Murder, data = states)
reg2
reg2 <- lm(Income ~ Illiteracy + "Life Exp" + Murder +
"HS Grad", data = states)
reg2 <- lm(Income ~ Illiteracy + "Life Exp" + Murder + "HS Grad", data = states)
reg2 <- lm(Income ~ Illiteracy + "Life Exp" + Murder, data = states)
reg2 <- lm(Income ~ Illiteracy + Murder, data = states)
head(states)
str(states)
reg2 <- lm(Income ~ Illiteracy + Life Exp + Murder +
HS Grad, data = states)
reg2 <- lm(Income ~ Illiteracy + `Life Exp` + Murder +
`HS Grad`, data = states)
reg2
summary(reg1)
summary(reg2)
anova(reg1)            # Coefficients w/inferential tests
data <- as.data.frame(state.x77)
# Use "Income" as the outcome variable and all others as
# predictors.
x <- as.matrix(data[, -2])
y <- data[, 2]
# Using variable groups
reg1 <- lm(y ~ x)
reg1
summary(reg1)
?state.x77
head(state.x77)
states <- as.data.frame(state.x77)
# Use "Income" as the outcome variable and all others as
# predictors.
x <- as.matrix(states[, -2])
x <- states[, -2]
y <- states[, 2]
# Using variable groups
reg1 <- lm(y ~ x)
# Use "Income" as the outcome variable and all others as
# predictors.
x <- as.matrix(states[, -2])
y <- states[, 2]
# Using variable groups
reg1 <- lm(y ~ x)
reg1
summary(reg1)
# Or specify variables individually
# states <- as.data.frame(state.x77)
reg2 <- lm(Income ~ Illiteracy + `Life Exp` + Murder +
`HS Grad`, data = states)
reg2
summary(reg2)
# Clear environment
rm(list = ls())
reg1
states <- as.data.frame(state.x77)
# Use "Income" as the outcome variable and all others as
# predictors.
X <- as.matrix(states[, -2])
y <- states[, 2]
# First regression model, using all of the predictors
reg1 <- lm(y ~ X)
reg1
summary(reg1)
library(datasets)
library(datasets)  # Load built-in datasets
head(iris)         # Show the first six lines of iris data
summary(iris)      # Summary statistics for iris data
plot(iris)         # Scatterplot matrix for iris data
dev.off()  # But only if there IS a plot
library(datasets)  # Load built-in datasets
head(iris)         # Show the first six lines of iris data
summary(iris)      # Summary statistics for iris data
plot(iris)         # Scatterplot matrix for iris data
dev.off()  # But only if there IS a plot
cat("\014")  # ctrl+L
install.packages("pacman")
require(pacman)
# Or, by using "pacman::p_load" you can use the p_load
# function from pacman without actually loading pacman.
# These are packages I load every time.
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr)
p_unload(all)  # Easier: clears all add-ons
detach("package:datasets", unload = TRUE)  # For base
datasets
library(datasets)  # Load/unload base packages manually
head(iris)
?plot  # Help for plot()
plot(species)
plot(iris$species)
plot(iris$Species)
plot(iris$Petal.Length)
plot(iris$Species, iris$Petal.Width)
plot(iris$Petal.Length, iris$Petal.Width)
plot(iris)
# Plot with options
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "Iris: Petal Length vs. Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
plot(cos, 0, 2*pi)
plot(exp, 1, 5)
plot(dnorm, -3, +3)
# Formula plot with options
plot(dnorm, -3, +3,
col = "#cc0000",
lwd = 5,
main = "Standard Normal Distribution",
xlab = "z-scores",
ylab = "Density")
?mtcars
head(mtcars)
barplot(mtcars$cyl)             # Doesn't work
# Need a table with frequencies for each category
cylinders <- table(mtcars$cyl)  # Create table
View(reg1)
barplot(cylinders)              # Bar chart
plot(cylinders)                 # Default X-Y plot (lines)
barplot(cylinders)              # Bar chart
library(datasets)
?iris
head(iris)
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Length)
# Put graphs in 3 rows and 1 column
par(mfrow = c(3, 1))
hist(iris$Petal.Width [iris$Species == "setosa"],
hist(iris$Petal.Width [iris$Species == "setosa"],
# Histograms for each species using options
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
# Histograms for each species using options
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
# Put graphs in 3 rows and 1 column
par(mfrow = c(3, 1))
# Histograms for each species using options
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
hist(iris$Petal.Width [iris$Species == "versicolor"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Versicolor",
xlab = "",
col = "purple")
hist(iris$Petal.Width [iris$Species == "virginica"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Virginica",
xlab = "",
col = "blue")
# Restore graphic parameter
par(mfrow=c(1, 1))
head(mtcars)
# Good to first check univariate distributions
hist(mtcars$wt)
# Good to first check univariate distributions
hist(mtcars$wt)
# Good to first check univariate distributions
hist(mtcars$wt)
# Good to first check univariate distributions
hist(mtcars$wt)
hist(mtcars$mpg)
# Basic X-Y plot for two quantitative variables
plot(mtcars$wt, mtcars$mpg)
plot(mtcars$wt, mtcars$mpg,
# Add some options
plot(mtcars$wt, mtcars$mpg,
pch = 19,         # Solid circle
cex = 1.5,        # Make 150% size
col = "#cc0000",  # Red
main = "MPG as a Function of Weight of Cars",
xlab = "Weight (in 1000 pounds)",
ylab = "MPG")
# Add some options
plot(mtcars$wt, mtcars$mpg,
pch = 19,         # Solid circle
cex = 1.5,        # Make 150% size
col = "#cc0000",  # Red
main = "MPG as a Function of Weight of Cars",
xlab = "Weight (in 1000 pounds)",
ylab = "MPG")
# Add some options
plot(mtcars$wt, mtcars$mpg,
pch = 19,         # Solid circle
cex = 1.5,        # Make 150% size
col = "#cc0000",  # Red
main = "MPG as a Function of Weight of Cars",
xlab = "Weight (in 1000 pounds)",
ylab = "MPG")
# Annual Canadian Lynx trappings 1821-1934
?lynx
# Default
hist(lynx)
head(lynx)
# Annual Canadian Lynx trappings 1821-1934
?lynx
# Add some options
hist(lynx,
breaks = 14,          # "Suggests" 14 bins
freq   = FALSE,       # Axis shows density, not freq.
col    = "thistle1",  # Color for histogram
main   = paste("Histogram of Annual Canadian Lynx",
"Trappings, 1821-1934"),
xlab   = "Number of Lynx Trapped")
curve(dnorm(x, mean = mean(lynx), sd = sd(lynx)),
col = "thistle4",  # Color of curve
# Add a normal distribution
curve(dnorm(x, mean = mean(lynx), sd = sd(lynx)),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)        # Superimpose on previous graph
# Add a normal distribution
curve(dnorm(x, mean = mean(lynx), sd = sd(lynx)),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)        # Superimpose on previous graph
# Add a normal distribution
curve(dnorm(x, mean = mean(lynx), sd = sd(lynx)),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)        # Superimpose on previous graph
# Add two kernel density estimators
lines(density(lynx), col = "blue", lwd = 2)
lines(density(lynx, adjust = 3), col = "purple", lwd = 2)
# Add a rug plot
rug(lynx, lwd = 2, col = "gray")
# Add two kernel density estimators
lines(density(lynx), col = "blue", lwd = 4) #DUM: density estimator
lines(density(lynx, adjust = 5), col = "purple", lwd = 2)
lines(density(lynx, adjust = 0), col = "purple", lwd = 2)
lines(density(lynx, adjust = 1), col = "purple", lwd = 2)
lines(density(lynx, adjust = 1.5), col = "purple", lwd = 2)
3
lines(density(lynx, adjust = 1), col = "purple", lwd = 2)
lines(density(lynx, adjust = 6), col = "purple", lwd = 2)
library(datasets)  # Load/unload base packages manually
head(iris)
summary(iris$Species)       # Categorical variable
summary(iris$Sepal.Length)  # Quantitative variable
summary(iris)               # Entire data frame
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, psych)
head(iris)
# Get info on package
p_help(psych)           # Opens package PDF in browser
# Get info on package
p_help(psych)           # Opens package PDF in browser
p_help(psych, web = F)  # Opens help in R Viewer
describe(iris$Sepal.Length)  # One quantitative variable
describe(iris)               # Entire data frame
library(datasets)  # Load/unload base packages manually
head(iris)
hist(iris$Petal.Length)
summary(iris$Petal.Length)
summary(iris$Species)  # Get names and n for each species
# Versicolor
hist(iris$Petal.Length[iris$Species == "versicolor"],
main = "Petal Length: Versicolor")
# Virginica
hist(iris$Petal.Length[iris$Species == "virginica"],
main = "Petal Length: Virginica")
# Setosa
hist(iris$Petal.Length[iris$Species == "setosa"],
main = "Petal Length: Setosa")
# Short petals only (all Setosa)
hist(iris$Petal.Length[iris$Petal.Length < 2],
main = "Petal Length < 2")
# Setosa
hist(iris$Petal.Length[iris$Species == "setosa"],
main = "Petal Length: Setosa")
# Short Virginica petals only
hist(iris$Petal.Length[iris$Species == "virginica" &
iris$Petal.Length < 5.5],
main = "Petal Length: Short Virginica")
# Format: data[rows, columns]
# Leave rows or columns blank to select all
i.setosa <- iris[iris$Species == "setosa", ]
head(i.setosa)
summary(i.setosa$Petal.Length)
hist(i.setosa$Petal.Length)
n1 <- 15  # Double precision by default
n1
typeof(n1)
n2 <- 1.5
n2
typeof(n2)
c1 <- "c"
c1
typeof(c1)
c2 <- "a string of text"
c2
typeof(c2)
l1 <- TRUE
l1
typeof(l1)
l2 <- F
l2
typeof(l2)
v1 <- c(1, 2, 3, 4, 5)
v1
v1 <- c(1, 2, 3, 4, 5) #c (concatenate)
v1
is.vector(v1)
v1 <- c(1, 2, 3, 4, 5)
v1
v1 <- (1, 2, 3, 4, 5)
is.vector(v1)
v2 <- c("a", "b", "c")
v2
is.vector(v2)
v3 <- c(TRUE, TRUE, FALSE, FALSE, TRUE)
v3
is.vector(v3)
m1 <- matrix(c(T, T, F, F, T, F), nrow = 2)
m1
m2 <- matrix(c("a", "b",
"c", "d"),
nrow = 2,
byrow = T)
m2
m2 <- matrix(c("a", "b",
"c", "d"),
nrow = 2)
m2
# Give data, then dimemensions (rows, columns, tables)
a1 <- array(c( 1:24), c(4, 3, 2))
a1
vNumeric   <- c(1, 2, 3)
vCharacter <- c("a", "b", "c")
vLogical   <- c(T, F, T)
dfa <- cbind(vNumeric, vCharacter, vLogical)
dfa  # Matrix of one data type
df <- as.data.frame(cbind(vNumeric, vCharacter, vLogical))
df  # Makes a data frame with three different data types
df <- as.data.frame(cbind(vNumeric, vCharacter, vLogical))
df  # Makes a data frame with three different data types
o1 <- c(1, 2, 3)
o2 <- c("a", "b", "c", "d")
o3 <- c(T, F, T, T, F)
list1 <- list(o1, o2, o3)
list1
list2 <- list(o1, o2, o3, list1)  # Lists within lists!
list2
